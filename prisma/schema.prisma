// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  firstname     String
  lastname      String
  phone         String
  username      String   @unique
  password_hash String
  email         String   @unique
  role          String   @default("client")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  addresses Address[]
  orders    Order[]

  @@map("users")
}

model Address {
  id           String @id @default(uuid())
  street       String
  city         String
  neighborhood String
  uf           String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("addresses")
}

model Payments {
  id             String  @id @default(uuid())
  payment_method String
  status         Boolean @default(false)

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique

  @@map("payments")
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Float
  orderItems OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("orderItems")
}

model Order {
  id         String   @id @default(uuid())
  status     Boolean  @default(true)
  created_at DateTime @default(now())

  user       User        @relation(fields: [user_id], references: [id])
  user_id    String
  payments   Payments?
  orderItems OrderItem[]

  @@map("orders")
}
